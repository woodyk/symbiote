#!/usr/bin/env python3
#
# commands 

import sys
import openai
from openai import OpenAI
import os
import subprocess
from rich.markdown import Markdown
from rich.console import Console
from prompt_toolkit import PromptSession
from prompt_toolkit.shortcuts import CompleteStyle
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.lexers import PygmentsLexer
from prompt_toolkit.styles import Style
from pygments.lexers.markup import MarkdownLexer

# Initialize OpenAI client and console
client = OpenAI()
console = Console()

# Read API key from an environment variable or secure storage
openai.api_key = os.getenv('OPENAI_API_KEY')

role = """You are a natural language to Linux command translator.  When given a query identify the proper command structure for Linux and output only the linux command needed to accomplish the requested task.  Never describe or outline the command just show the command only.  If given a Linux command translate it to natural language. If the command output is going to be more than 100 characters in length provide a shell script to accomplish the task."""

chat_history = []

def ai(input_text):
    global chat_history

    chat_history.append({"role": "user", "content": input_text})

    messages = [
        {"role": "system", "content": role},
    ] + chat_history

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
        )
    except Exception as e:
        console.print(f"[red]Error: {str(e)}[/red]", file=sys.stderr)
        return

    response_content = response.choices[0].message.content.strip()
    chat_history.append({"role": "assistant", "content": response_content})
    markdown = Markdown(response_content)
    console.print(markdown)
    return response_content

def run_command(command):
    if "rm" in command:
        return "Error: 'rm' command is not allowed."
    result = subprocess.run(command, shell=True, text=True, capture_output=True)
    return result.stdout, result.stderr

if __name__ == "__main__":
    # Check if there is piped input
    if not sys.stdin.isatty():
        input_text = sys.stdin.read().strip()
        main(input_text)
        sys.exit(0)

    # Configure prompt_toolkit for vi mode, multiline input, and history
    bindings = KeyBindings()
    session = PromptSession(
        multiline=True,
        vi_mode=True,
        complete_style=CompleteStyle.READLINE_LIKE,
        key_bindings=bindings,
        lexer=PygmentsLexer(MarkdownLexer),
        history=None,  # Add history here if needed
    )

    style = Style.from_dict({
        '': 'bg:#f5f5f5 #000000',
        'prompt': 'bg:#ffffff #000000 bold',
    })

    @bindings.add('c-k')
    def _(event):
        """Display help."""
        console.print("[bold blue]Help:[/bold blue] Type your command and press Enter. Use 'exit::' to quit.")

    while True:
        try:
            input_text = session.prompt(
                '>> ',
                style=style,
                include_default_pygments_style=False,
            )
            if input_text.strip().lower() in ["exit::", "quit::"]:
                break
            command = ai(input_text)
        except (EOFError, KeyboardInterrupt):
            break

        #result, err = run_command(command)
        #print(result)
